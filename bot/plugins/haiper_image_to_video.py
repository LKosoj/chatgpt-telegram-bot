#haiper_image_to_video.py
import os
import logging
import tempfile
import aiohttp
import io
import base64
import json
import asyncio
from typing import Dict, List, Optional
from PIL import Image
from datetime import datetime, timedelta
import contextlib
from asyncio import Queue, Task
from dataclasses import dataclass
from enum import Enum
from telegram import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InlineQueryResultArticle,
    InputTextMessageContent,
    Update,
    ForceReply, 
    ReplyKeyboardRemove
)
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import hashlib
import telegram
from telegram import constants

from .plugin import Plugin
from ..utils import escape_markdown
# API Configuration
API_URL = "https://api.vsegpt.ru/v1/video"
MAX_RETRIES = 4
RETRY_DELAY = 10
STATUS_CHECK_INTERVAL = 10
TIMEOUT_MINUTES = 45

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_PROMPT = 1

class TempFileManager:
    """
    Context manager for handling temporary files with automatic cleanup.
    
    Attributes:
        suffix (Optional[str]): File extension for the temporary file
        temp_file: Temporary file object
        path (Optional[str]): Path to the temporary file
    """

    def __init__(self, suffix: Optional[str] = None) -> None:
        """
        Initialize the temporary file manager.
        
        Args:
            suffix: Optional file extension for the temporary file
        """
        self.suffix = suffix
        self.temp_file = None
        self.path = None

    def __enter__(self) -> 'TempFileManager':
        """
        Create and open a temporary file.
        
        Returns:
            TempFileManager: Self reference for context manager
        """
        self.temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=self.suffix)
        self.path = self.temp_file.name
        return self

    def __exit__(self, exc_type: Optional[type], exc_val: Optional[Exception], exc_tb: Optional[object]) -> None:
        """
        Clean up the temporary file when exiting the context.
        
        Args:
            exc_type: Type of the exception that occurred, if any
            exc_val: Exception instance that occurred, if any
            exc_tb: Traceback of the exception that occurred, if any
        """
        if self.temp_file:
            self.temp_file.close()
        if self.path and os.path.exists(self.path):
            try:
                os.unlink(self.path)
            except Exception as e:
                logger.error(f"Error deleting temporary file {self.path}: {e}")

    def write(self, data: bytes) -> None:
        """
        Write data to the temporary file.
        
        Args:
            data: Bytes to write to the file
        """
        if self.temp_file:
            self.temp_file.write(data)
            self.temp_file.flush()

class TaskStatus(Enum):
    """
    Enumeration of possible task statuses.
    """
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

@dataclass
class VideoTask:
    """
    Data class representing a video generation task.
    
    Attributes:
        task_id (str): Unique identifier for the task
        user_id (int): Telegram user ID
        chat_id (int): Telegram chat ID
        file_id (str): Telegram file ID of the source image
        prompt (str): Text prompt for video generation
        status (TaskStatus): Current status of the task
        result (Optional[Dict]): Task result data if completed
        error (Optional[str]): Error message if task failed
    """
    task_id: str
    user_id: int
    chat_id: int
    file_id: str
    prompt: str
    status: TaskStatus
    result: Optional[Dict] = None
    error: Optional[str] = None

class HaiperImageToVideoPlugin(Plugin):
    def __init__(self):
        self.haiper_token = None
        self.headers = None
        self.status_headers = None
        self.task_queue: Queue[VideoTask] = Queue()
        self.active_tasks: Dict[str, VideoTask] = {}
        self.worker_task: Optional[Task] = None
        self.user_settings: Dict[int, Dict[str, str]] = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.openai = None
        self.bot = None

    def get_source_name(self) -> str:
        return "HaiperImageToVideo"

    def get_spec(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞"""
        return [
            {
                "name": "convert_image_to_video",
                "description": "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "image_path": {"type": "string"},
                        "prompt": {"type": "string"}
                    },
                    "required": ["image_path"]
                }
            },
        ]

    def get_commands(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–º.
        """
        return [
            {
                "command": "animate",
                "description": "–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "handler": self.handle_animate_command,
                "help": self.handle_animate_help_command,
                "handler_kwargs": {},
                "plugin_name": "HaiperImageToVideoPlugin",
            },
            {
                "command": "animate_prompt",
                "description": "–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ",
                "handler": self.handle_prompt_constructor,
                "plugin_name": "HaiperImageToVideoPlugin",
                "handler_kwargs": {},
                "add_to_menu": True
            },
            {
                "command": "animate_help",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ animate",
                "handler": self.handle_animate_help_command,
                "plugin_name": "HaiperImageToVideoPlugin",
                "handler_kwargs": {},
                "add_to_menu": True
            },
            {
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query –ø–ª–∞–≥–∏–Ω–∞, –∫—Ä–æ–º–µ apply_settings
                "callback_query_handler": self.handle_callback_query,
                "callback_pattern": "^haiper_",
                "plugin_name": "HaiperImageToVideoPlugin",
                "handler_kwargs": {}
            }
        ]

    def get_inline_handlers(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        return [
            {
                "handler": self.handle_inline_query,
                "handler_kwargs": {}
            }
        ]

    def get_message_handlers(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return [
            {
                "handler": ConversationHandler(
                    entry_points=[
                        CommandHandler("animate_prompt", self.handle_prompt_constructor)
                    ],
                    states={
                        None: [
                            CallbackQueryHandler(self.apply_settings, pattern="^haiper_apply_settings$")
                        ],
                        WAITING_PROMPT: [
                            MessageHandler(
                                filters.TEXT & ~filters.COMMAND & filters.REPLY,
                                self.handle_prompt_reply
                            ),
                        ]
                    },
                    fallbacks=[
                        CommandHandler("cancel", self.cancel_prompt)
                    ],
                    name="haiper_conversation",
                    persistent=False,
                    map_to_parent=True
                ),
                "handler_kwargs": {}
            },
            {
                "filters": "filters.PHOTO",
                "handler": self.handle_photo_message,
                "handler_kwargs": {}
            }
        ]

    async def start_worker(self):
        if self.worker_task is None or self.worker_task.done():
            self.worker_task = asyncio.create_task(self._process_queue())

    async def _process_queue(self):
        while True:
            try:
                task = await self.task_queue.get()
                if task.status != TaskStatus.PENDING:
                    continue

                task.status = TaskStatus.PROCESSING
                try:
                    result = await self._process_video_task(task)
                    task.status = TaskStatus.COMPLETED
                    task.result = result
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if task.result and 'url' in task.result:
                        try:
                            await self.bot.send_message(
                                chat_id=task.chat_id,
                                text="‚ú® –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–∞—é..."
                            )
                            await self.bot.send_video(
                                chat_id=task.chat_id,
                                video=task.result['url'],
                                caption=f"üé¨ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —Å –ø—Ä–æ–º–ø—Ç–æ–º:\n{task.prompt}"
                            )
                        except Exception as e:
                            logging.error(f"Error sending video to user: {e}")
                            await self.bot.send_message(
                                chat_id=task.chat_id,
                                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
                            )
                except Exception as e:
                    task.status = TaskStatus.FAILED
                    task.error = str(e)
                    logging.error(f"Error processing task {task.task_id}: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await self.bot.send_message(
                            chat_id=task.chat_id,
                            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}"
                        )
                    except Exception as send_error:
                        logging.error(f"Error sending error message to user: {send_error}")

                self.task_queue.task_done()
            except Exception as e:
                logging.error(f"Error in queue processor: {e}")
                await asyncio.sleep(1)

    async def _process_video_task(self, task: VideoTask) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
        try:
            # Get and process image
            file = await self.bot.get_file(task.file_id)
            image_bytes = await file.download_as_bytearray()
            
            img = Image.open(io.BytesIO(image_bytes))
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='JPEG')
            image_base64 = base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')

            model_id = "img2vid-kling/standart16"
            
            self.haiper_token = self.openai.api_key
            self.headers = {
                "Authorization": f"Bearer {self.haiper_token}",
                "Content-Type": "application/json"
            }
            self.status_headers = {
                "Authorization": f"Bearer {self.haiper_token}"
            }

            payload = {
                "model": model_id,
                "action": "generate", 
                "aspect_ratio": "16:9",
                "prompt": task.prompt,
                "image_url": f"data:image/jpeg;base64,{image_base64}",
            }

            start_time = datetime.now()
            timeout_time = start_time + timedelta(minutes=TIMEOUT_MINUTES)

            async with aiohttp.ClientSession() as session:
                # Initial generation request with retry logic
                response_data = None
                for retry in range(MAX_RETRIES):
                    try:
                        async with session.post(
                            f"{API_URL}/generate",
                            headers=self.headers,
                            json=payload,
                            timeout=aiohttp.ClientTimeout(total=60)
                        ) as response:
                            response_text = await response.text()
                            logging.info(f"API Response status: {response.status}, text: {response_text}")
                            
                            if response.status == 429:  # Rate limit
                                retry_after = int(response.headers.get('Retry-After', RETRY_DELAY))
                                logging.warning(f"Rate limit reached. Waiting {retry_after} seconds...")
                                await asyncio.sleep(retry_after)
                                continue
                            elif response.status == 402:  # Payment required
                                raise Exception("API key has expired or payment is required")
                            elif response.status == 413:  # Payload too large
                                raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
                            elif response.status != 200:
                                raise Exception(f"API request failed with status {response.status}: {response_text}")
                            
                            try:
                                response_data = json.loads(response_text)
                                logging.info(f"Parsed response data: {response_data}")
                            except json.JSONDecodeError:
                                raise Exception(f"Invalid JSON response: {response_text}")
                            
                            if response_data.get("status") == "error":
                                raise Exception(f"API error: {response_data.get('reason', 'Unknown error')}")
                            
                            break  # Success, exit retry loop
                    except aiohttp.ClientError as e:
                        if retry == MAX_RETRIES - 1:  # Last retry
                            raise Exception(f"Failed to connect to API after {MAX_RETRIES} retries: {str(e)}")
                        await asyncio.sleep(RETRY_DELAY)
                        continue

                if not response_data:
                    raise Exception("Failed to get response from API")

                task_id = response_data.get("request_id")
                if not task_id:
                    logging.error(f"No request_id in response. Full response: {response_data}")
                    raise Exception("No request_id in response")

                # Poll for task completion
                status_headers = {
                    "Authorization": f"Key {self.haiper_token}"
                }
                while datetime.now() < timeout_time:
                    async with session.get(
                        f"{API_URL}/status?request_id={task_id}",
                        headers=status_headers
                    ) as response:
                        if response.status != 200:
                            raise Exception(f"Status check failed: {await response.text()}")
                        
                        status_data = await response.json()
                        task_status = status_data.get("status")
                        #logging.info(f"Task {task_id} status: {task_status}")
                        
                        if task_status == "COMPLETED":
                            video_url = status_data.get('url')
                            if not video_url:
                                raise Exception("No video URL in completed task response")
                            return {"url": video_url}
                        elif task_status == "FAILED":
                            raise Exception(f"Task failed: {status_data.get('reason', 'Unknown error')}")
                        elif task_status in ["pending", "processing", "IN_QUEUE", "IN_PROGRESS"]:
                            await asyncio.sleep(STATUS_CHECK_INTERVAL)
                            logging.info(f"Task {task_id} status: {task_status}")
                        else:
                            raise Exception(f"Unknown task status: {task_status}")

                raise Exception("Task timed out")

        except Exception as e:
            logging.error(f"Error processing video task: {e}")
            raise

    def initialize(self, helper):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        self.haiper_token = helper.api_key
        self.headers = {
            "Authorization": f"Bearer {self.haiper_token}",
            "Content-Type": "application/json",
            "X-Title": "tgBot"
        }
        self.status_headers = {
            "Authorization": f"Bearer {self.haiper_token}"
        }
        self.bot = helper.bot
        self.openai = helper

    async def execute(self, function_name: str, helper, **kwargs) -> Dict:
        """Execute plugin functionality"""
        self.initialize(helper)

        try:
            logging.info(f"haiper_image_to_video execute called with kwargs: {kwargs}")
            prompt = kwargs.get('prompt', "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
            chat_id = kwargs.get('chat_id')
            logging.info(f"animation prompt: {prompt}")

            # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_id = kwargs.get('image_path')
            if not file_id:
                raise ValueError("No image file_id provided")

            logging.info(f"Found image {file_id} for user {chat_id}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            task = VideoTask(
                task_id=self.get_file_id_hash(file_id),
                user_id=chat_id,
                chat_id=chat_id,
                file_id=file_id,
                prompt=prompt,
                status=TaskStatus.PENDING
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            await self.start_worker()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            await self.task_queue.put(task)

            return {"message": "–í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."}

        except Exception as e:
            logging.error(f"Error in execute: {e}")
            raise

    async def handle_animate_command(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /animate"""
        if not update or not update.message:
            return
            
        message = update.message
        chat_id = message.chat.id
        user_id = message.from_user.id
        logging.info(f"handle_animate_command called with chat_id: {chat_id}, user_id: {user_id}")
        
        if not self.openai:
            await message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω OpenAI helper")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É /animate)
            prompt = message.text[8:].strip() if message.text else "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            if message.reply_to_message and (message.reply_to_message.photo or 
                (message.reply_to_message.document and 
                 message.reply_to_message.document.mime_type.startswith('image/'))):
                # –ë–µ—Ä–µ–º file_id –∏–∑ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if message.reply_to_message.photo:
                    file_id = message.reply_to_message.photo[-1].file_id
                else:
                    file_id = message.reply_to_message.document.file_id
                    
                logging.info(f"Processing animation for replied photo with file_id: {file_id}")
                # –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–æ–º–ø—Ç–æ–º
                await self._process_animate_command(message, file_id, prompt)
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º—É–º 1)
            user_images = self.openai.db.get_user_images(user_id, chat_id, limit=1)
            if not user_images:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /animate")
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if len(user_images) == 1:
                await self._process_animate_command(message, user_images[0]['file_id'], prompt)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            keyboard = []
            for idx, img in enumerate(user_images, 1):
                created_at = datetime.fromisoformat(img['created_at'].replace('Z', '+00:00'))
                time_str = created_at.strftime("%H:%M:%S")
                keyboard.append([InlineKeyboardButton(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx} (–∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ {time_str})",
                    callback_data=f"animate_{img['file_id_hash']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –∏–∑ –ë–î
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:",
                reply_markup=reply_markup
            )

        except Exception as e:
            logging.error(f"Error in handle_animate_command: {e}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def _process_animate_command(self, message, file_id, prompt=None):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã animate —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        temp_file = None
        start_time = datetime.now()
        #status_message = await message.reply_text(
        #    "üé¨ –∞–Ω–∏–º–∞—Ü–∏—è  –≥–æ—Ç–æ–≤–∞.\n"
        #    "üéØ –ü—Ä–æ–º–ø—Ç: {prompt}"
        #)
        #return
        
        try:
            # Create and queue new task
            task = VideoTask(
                task_id=f"{message.chat.id}_{datetime.now().timestamp()}",
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                file_id=file_id,
                prompt=prompt if prompt else "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É",
                status=TaskStatus.PENDING
            )

            await self.task_queue.put(task)
            self.active_tasks[task.task_id] = task

            # Ensure worker is running
            await self.start_worker()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_message = await message.reply_text(
                "üé¨ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏...\n\n"
                f"üéØ –ü—Ä–æ–º–ø—Ç: {task.prompt}\n"
                "‚è≥ –°—Ç–∞—Ç—É—Å: –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –∞–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞."
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ active_tasks
                current_task = self.active_tasks.get(task.task_id)
                if not current_task:
                    raise ValueError("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                
                if current_task.status in [TaskStatus.COMPLETED, TaskStatus.FAILED]:
                    break
                    
                await asyncio.sleep(30)
                elapsed_time = datetime.now() - start_time
                elapsed_minutes = elapsed_time.total_seconds() / 60

                if current_task.status == TaskStatus.PROCESSING:
                    await status_message.edit_text(
                        "üé¨ –°–æ–∑–¥–∞—é –∞–Ω–∏–º–∞—Ü–∏—é...\n\n"
                        f"üéØ –ü—Ä–æ–º–ø—Ç: {current_task.prompt}\n"
                        f"‚è≥ –°—Ç–∞—Ç—É—Å: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ\n"
                        f"‚åõÔ∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes:.1f} –º–∏–Ω.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    )
                elif elapsed_minutes >= TIMEOUT_MINUTES:
                    current_task.status = TaskStatus.FAILED
                    current_task.error = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
                    break

            current_task = self.active_tasks.get(task.task_id)
            if current_task.status == TaskStatus.COMPLETED and current_task.result:
                video_url = current_task.result.get("url")
                if not video_url:
                    raise ValueError("URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")

                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
                async with aiohttp.ClientSession() as session:
                    async with session.get(video_url) as response:
                        if response.status != 200:
                            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –°—Ç–∞—Ç—É—Å: {response.status}")
                        temp_file.write(await response.read())
                temp_file.close()

                await status_message.edit_text(
                    "‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"üéØ –ü—Ä–æ–º–ø—Ç: {current_task.prompt}\n"
                    f"‚åõÔ∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {elapsed_minutes:.1f} –º–∏–Ω."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(temp_file.name, 'rb') as video_file:
                    await message.reply_video(
                        video=video_file,
                        caption=f"üé® –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É: {current_task.prompt}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                self.active_tasks.pop(task.task_id, None)
                
            elif current_task.status == TaskStatus.FAILED:
                error_message = current_task.error or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                elapsed_time = datetime.now() - start_time
                elapsed_minutes = elapsed_time.total_seconds() / 60
                await status_message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é\n\n"
                    f"üéØ –ü—Ä–æ–º–ø—Ç: {current_task.prompt}\n"
                    f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {error_message}\n"
                    f"‚åõÔ∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes:.1f} –º–∏–Ω."
                )
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                self.active_tasks.pop(task.task_id, None)

        except Exception as e:
            elapsed_time = datetime.now() - start_time
            elapsed_minutes = elapsed_time.total_seconds() / 60
            logging.error(f"Error in _process_animate_command: {e}")
            await message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                f"‚åõÔ∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes:.1f} –º–∏–Ω.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if task.task_id in self.active_tasks:
                self.active_tasks.pop(task.task_id, None)
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if temp_file and os.path.exists(temp_file.name):
                try:
                    os.unlink(temp_file.name)
                except Exception as e:
                    logging.error(f"Error deleting temporary file: {e}")

    async def handle_animate_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, **kwargs) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /animate_help"""
        help_text = """
*–ö–æ–º–∞–Ω–¥–∞ /animate - —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*

*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /animate [prompt]

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
- prompt (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∂–µ–ª–∞–µ–º—É—é –∞–Ω–∏–º–∞—Ü–∏—é
  –ù–∞–ø—Ä–∏–º–µ—Ä: `/animate —Å–¥–µ–ª–∞–π –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ`
  –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É"
–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/animate [prompt]

*–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏:*
/animate_prompt
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É. –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG
"""
        await update.message.reply_text(escape_markdown(help_text), parse_mode=constants.ParseMode.MARKDOWN_V2)

    async def handle_photo_message(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
        try:
            message = update.message
            # –ü–æ–ª—É—á–∞–µ–º caption —Å–æ–æ–±—â–µ–Ω–∏—è
            caption = message.caption
            if caption and caption.lower().startswith('/animate'):
                # –ï—Å–ª–∏ –≤ caption –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /animate, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
                prompt = caption[8:].strip()  # –£–±–∏—Ä–∞–µ–º '/animate ' –∏–∑ –Ω–∞—á–∞–ª–∞
                await self.handle_animate_command(update, context)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                file_id = message.photo[-1].file_id
                # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –∏–∑ –ë–î
                user_images = self.openai.db.get_user_images(
                    message.from_user.id,
                    str(message.chat.id),
                    limit=1
                )
                if user_images:
                    file_id_hash = user_images[0]['file_id_hash']
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            "üé¨ –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é",
                            callback_data=f"animate_{file_id_hash}"
                        )]
                    ])
                    await message.reply_text(
                        "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
                        reply_markup=keyboard
                    )
        except Exception as e:
            logger.error(f"Error handling photo message: {e}")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        user_id = query.from_user.id
        
        try:
            if not query.data.startswith('haiper_'):
                return

            data = query.data.replace('haiper_', '')
            #logging.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            #logging.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_settings.get(user_id, {})}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
            if data == "close_menu":
                #logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞")
                await query.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
                await query.message.delete()
                return
                
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if data.startswith('style_'):
                style_id = data.replace('style_', '')
                if user_id not in self.user_settings:
                    self.user_settings[user_id] = {}
                self.user_settings[user_id]['style'] = style_id
                await query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {self.get_style_name(style_id)}")
                await self.show_main_menu_with_selections(query.message, user_id)
                return

            if data.startswith('effect_'):
                effect_id = data.replace('effect_', '')
                if user_id not in self.user_settings:
                    self.user_settings[user_id] = {}
                self.user_settings[user_id]['effect'] = effect_id
                await query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç: {self.get_effect_name(effect_id)}")
                await self.show_main_menu_with_selections(query.message, user_id)
                return

            if data.startswith('preset_'):
                preset_id = data.replace('preset_', '')
                if user_id not in self.user_settings:
                    self.user_settings[user_id] = {}
                self.user_settings[user_id]['preset'] = preset_id
                await query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç: {self.get_preset_name(preset_id)}")
                await self.show_main_menu_with_selections(query.message, user_id)
                return

            if data.startswith('animate_'):
                await self.handle_animate_button(query)
                return

            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if data == "separator":
                await query.answer()
                return

            if data == "prompt_restart":
                logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞")
                await query.answer("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                if user_id in self.user_settings:
                    self.user_settings[user_id] = {}
                logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã")
                await self.show_main_menu_with_selections(query.message, user_id)
                return

            if data == "back_to_main":
                logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'")
                await query.answer()
                await self.show_main_menu_with_selections(query.message, user_id)
                return

            if data == "show_styles":
                await query.answer()
                await self.show_style_selection(query.message)
                return

            if data == "show_effects":
                await query.answer()
                await self.show_effects_selection(query.message)
                return

            if data == "show_presets":
                await query.answer()
                await self.show_presets_selection(query.message)
                return

            if data == "apply_settings":
                await self.apply_settings(query)
                return

            logging.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            await query.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}", exc_info=True)
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def show_style_selection(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.chat.id
            settings = self.user_settings.get(user_id, {})
            current_style = settings.get('style')
            
            styles = [
                ("realistic", "üé¨ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "–ø–ª–∞–≤–Ω—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
                ("cartoon", "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π", "–∏–≥—Ä–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"),
                ("artistic", "üñº –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("cinematic", "üé• –ö–∏–Ω–æ", "–¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
                ("abstract", "üåà –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π", "–Ω–µ–æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"),
                ("anime", "üéå –ê–Ω–∏–º–µ", "–≤ —Å—Ç–∏–ª–µ —è–ø–æ–Ω—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏"),
                ("pixel", "üëæ –ü–∏–∫—Å–µ–ª—å–Ω—ã–π", "—Ä–µ—Ç—Ä–æ-–∏–≥—Ä–æ–≤–∞—è —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞"),
                ("watercolor", "üé® –ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π", "–Ω–µ–∂–Ω—ã–µ —Ä–∞–∑–º—ã—Ç–∏—è"),
                ("neon", "üí° –ù–µ–æ–Ω–æ–≤—ã–π", "—è—Ä–∫–∏–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("vintage", "üì∑ –í–∏–Ω—Ç–∞–∂", "—Å—Ç–∞—Ä–æ–µ –∫–∏–Ω–æ"),
                ("minimalist", "‚ö™Ô∏è –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "–ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏"),
                ("cyberpunk", "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫", "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"),
                ("comic", "üí≠ –ö–æ–º–∏–∫—Å", "–∫–∞–∫ –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–µ–ª–ª–∞—Ö"),
                ("glitch", "‚ö°Ô∏è –ì–ª–∏—Ç—á", "—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è"),
                ("surreal", "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º", "–Ω–µ–æ–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            ]
            
            keyboard = []
            for i in range(0, len(styles), 2):
                row = []
                for style_id, style_name, _ in styles[i:i+2]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ —Å—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω
                    button_text = f"{style_name} ‚úì" if style_id == current_style else style_name
                    row.append(InlineKeyboardButton(
                        button_text,
                        callback_data=f"haiper_style_{style_id}"
                    ))
                keyboard.append(row)
            
            keyboard.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="haiper_back_to_main")
            ])
            
            style_descriptions = "\n".join(
                f"{name} - {desc}" for _, name, desc in styles
            )
            
            await message.edit_text(
                "*üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏:*\n\n"
                f"{style_descriptions}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é —Å—Ç–∏–ª–µ–π: {e}")
                raise
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ show_style_selection: {e}")
            raise

    async def show_effects_selection(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.chat.id
            settings = self.user_settings.get(user_id, {})
            current_effect = settings.get('effect')
            
            effects = [
                ("zoom", "üîç –ó—É–º", "–ø–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ"),
                ("pan", "‚ÜîÔ∏è –ü–∞–Ω–æ—Ä–∞–º–∞", "–ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("rotate", "üîÑ –ü–æ–≤–æ—Ä–æ—Ç", "–≤—Ä–∞—â–µ–Ω–∏–µ"),
                ("morph", "üé≠ –ú–æ—Ä—Ñ–∏–Ω–≥", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è"),
                ("wave", "üåä –í–æ–ª–Ω—ã", "–≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç"),
                ("blur", "üå´ –†–∞–∑–º—ã—Ç–∏–µ", "–ø–ª–∞–≤–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ"),
                ("shake", "üì≥ –¢—Ä—è—Å–∫–∞", "–≤–∏–±—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
                ("glitch", "‚ö°Ô∏è –ì–ª–∏—Ç—á", "—Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–º–µ—Ö–∏"),
                ("bounce", "üèÄ –û—Ç—Å–∫–æ–∫", "–ø—Ä—É–∂–∏–Ω—è—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("spiral", "üåÄ –°–ø–∏—Ä–∞–ª—å", "—Å–ø–∏—Ä–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ"),
                ("fade", "üåÖ –ó–∞—Ç—É—Ö–∞–Ω–∏–µ", "–ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ"),
                ("flash", "üí´ –í—Å–ø—ã—à–∫–∞", "—è—Ä–∫–∏–µ –≤—Å–ø—ã—à–∫–∏"),
                ("mirror", "ü™û –ó–µ—Ä–∫–∞–ª–æ", "–∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è"),
                ("ripple", "üíß –†—è–±—å", "—ç—Ñ—Ñ–µ–∫—Ç –≤–æ–ª–Ω –Ω–∞ –≤–æ–¥–µ"),
                ("swing", "üé≠ –ö–∞—á–∞–Ω–∏–µ", "–º–∞—è—Ç–Ω–∏–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("float", "üéà –ü–∞—Ä–µ–Ω–∏–µ", "–Ω–µ–≤–µ—Å–æ–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("pulse", "üíì –ü—É–ª—å—Å–∞—Ü–∏—è", "—Ä–∏—Ç–º–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                ("scatter", "‚ú® –†–∞—Å—Å–µ–∏–≤–∞–Ω–∏–µ", "—Ä–∞–∑–ª–µ—Ç–∞—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã"),
                ("stretch", "‚ÜîÔ∏è –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ", "—ç–ª–∞—Å—Ç–∏—á–Ω–∞—è –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è"),
                ("fold", "üìÑ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ", "—ç—Ñ—Ñ–µ–∫—Ç —Å–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è"),
                ("kaleidoscope", "üé® –ö–∞–ª–µ–π–¥–æ—Å–∫–æ–ø", "–∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ —É–∑–æ—Ä—ã"),
                ("pixelate", "üî≤ –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è", "—ç—Ñ—Ñ–µ–∫—Ç –ø–∏–∫—Å–µ–ª–µ–π"),
                ("dissolve", "üí® –†–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ"),
                ("shatter", "üíî –†–∞–∑–±–∏–≤–∞–Ω–∏–µ", "—ç—Ñ—Ñ–µ–∫—Ç –æ—Å–∫–æ–ª–∫–æ–≤"),
                ("neon", "üí° –ù–µ–æ–Ω", "—Å–≤–µ—Ç—è—â–∏–µ—Å—è –∫–æ–Ω—Ç—É—Ä—ã")
            ]
            
            keyboard = []
            for i in range(0, len(effects), 2):
                row = []
                for effect_id, effect_name, _ in effects[i:i+2]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω
                    button_text = f"{effect_name} ‚úì" if effect_id == current_effect else effect_name
                    row.append(InlineKeyboardButton(
                        button_text,
                        callback_data=f"haiper_effect_{effect_id}"
                    ))
                keyboard.append(row)
            
            keyboard.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="haiper_back_to_main")
            ])
            
            effect_descriptions = "\n".join(
                f"{name} - {desc}" for _, name, desc in effects
            )
            
            await message.edit_text(
                "*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç:*\n\n"
                f"{effect_descriptions}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                raise

    async def show_presets_selection(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.chat.id
            settings = self.user_settings.get(user_id, {})
            current_preset = settings.get('preset')
            
            presets = [
                ("art", "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"),
                ("realistic", "üé¨ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("wave", "üåä –í–æ–ª–Ω–æ–≤–æ–π", "—ç—Ñ—Ñ–µ–∫—Ç —Ç–µ—á–µ–Ω–∏—è"),
                ("emotion", "üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–ø–µ—Ä–µ–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"),
                ("nature", "üåø –ü—Ä–∏—Ä–æ–¥–Ω—ã–π", "–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("tech", "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π", "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("magic", "‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–π", "–≤–æ–ª—à–µ–±–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"),
                ("retro", "üì∫ –†–µ—Ç—Ä–æ", "–≤–∏–Ω—Ç–∞–∂–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"),
                ("cosmic", "üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("dream", "üí´ –°–Ω–æ–≤–∏–¥–µ–Ω–∏–µ", "—Å—é—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"),
                ("dynamic", "‚ö°Ô∏è –î–∏–Ω–∞–º–∏—á–Ω—ã–π", "—ç–Ω–µ—Ä–≥–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
                ("gentle", "üçÉ –ù–µ–∂–Ω—ã–π", "–º—è–≥–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"),
                ("horror", "üëª –•–æ—Ä—Ä–æ—Ä", "–∂—É—Ç–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"),
                ("party", "üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π", "–≤–µ—Å—ë–ª–∞—è –∞–Ω–∏–º–∞—Ü–∏—è"),
                ("romantic", "üíù –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–Ω–µ–∂–Ω—ã–µ –ø–µ—Ä–µ–ª–∏–≤—ã"),
                ("sport", "üèÉ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π", "–¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
                ("fantasy", "üêâ –§—ç–Ω—Ç–µ–∑–∏", "–º–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è"),
                ("steampunk", "‚öôÔ∏è –°—Ç–∏–º–ø–∞–Ω–∫", "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è"),
                ("underwater", "üê† –ü–æ–¥–≤–æ–¥–Ω—ã–π", "–ø–ª–∞–≤–Ω—ã–µ —Ç–µ—á–µ–Ω–∏—è"),
                ("fire", "üî• –û–≥–Ω–µ–Ω–Ω—ã–π", "–ø–ª–∞–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("winter", "‚ùÑÔ∏è –ó–∏–º–Ω–∏–π", "–º–æ—Ä–æ–∑–Ω—ã–µ —É–∑–æ—Ä—ã"),
                ("space", "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π", "–º–µ–∂–∑–≤—ë–∑–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"),
                ("rainbow", "üåà –†–∞–¥—É–∂–Ω—ã–π", "—è—Ä–∫–∏–µ –ø–µ—Ä–µ–ª–∏–≤—ã"),
                ("matrix", "üíª –ú–∞—Ç—Ä–∏—Ü–∞", "—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–æ–∂–¥—å")
            ]
            
            keyboard = []
            for i in range(0, len(presets), 2):
                row = []
                for preset_id, preset_name, _ in presets[i:i+2]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç –≤—ã–±—Ä–∞–Ω
                    button_text = f"{preset_name} ‚úì" if preset_id == current_preset else preset_name
                    callback_data = f"haiper_preset_{preset_id}"
                    row.append(InlineKeyboardButton(
                        button_text,
                        callback_data=callback_data
                    ))
                keyboard.append(row)
            
            keyboard.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="haiper_back_to_main")
            ])
            
            preset_descriptions = "\n".join(
                f"{name} - {desc}" for _, name, desc in presets
            )
            
            await message.edit_text(
                "*üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç:*\n\n"
                f"{preset_descriptions}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}")
                raise
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ show_presets_selection: {e}")
            raise

    def get_preset_name(self, preset_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        presets = {
            "art": "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "realistic": "üé¨ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "wave": "üåä –í–æ–ª–Ω–æ–≤–æ–π",
            "emotion": "üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π",
            "nature": "üåø –ü—Ä–∏—Ä–æ–¥–Ω—ã–π",
            "tech": "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π",
            "magic": "‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–π",
            "retro": "üì∫ –†–µ—Ç—Ä–æ",
            "cosmic": "üåå –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π",
            "dream": "üí´ –°–Ω–æ–≤–∏–¥–µ–Ω–∏–µ",
            "dynamic": "‚ö°Ô∏è –î–∏–Ω–∞–º–∏—á–Ω—ã–π",
            "gentle": "üçÉ –ù–µ–∂–Ω—ã–π",
            "horror": "üëª –•–æ—Ä—Ä–æ—Ä",
            "party": "üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π",
            "romantic": "üíù –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π",
            "sport": "üèÉ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π",
            "fantasy": "üêâ –§—ç–Ω—Ç–µ–∑–∏",
            "steampunk": "‚öôÔ∏è –°—Ç–∏–º–ø–∞–Ω–∫",
            "underwater": "üê† –ü–æ–¥–≤–æ–¥–Ω—ã–π",
            "fire": "üî• –û–≥–Ω–µ–Ω–Ω—ã–π",
            "winter": "‚ùÑÔ∏è –ó–∏–º–Ω–∏–π",
            "space": "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π",
            "rainbow": "üåà –†–∞–¥—É–∂–Ω—ã–π",
            "matrix": "üíª –ú–∞—Ç—Ä–∏—Ü–∞"
        }
        return presets.get(preset_id, preset_id)

    async def apply_settings(self, query):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        user_id = query.from_user.id
        logger.info(f"[ConversationHandler] apply_settings –Ω–∞—á–∞–ª–æ: user_id={user_id}")
        logger.info(f"–í—ã–∑–≤–∞–Ω apply_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        settings = self.user_settings.get(user_id, {})
        logger.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {settings}")
        
        if not settings:
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await query.answer("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        user_images = self.openai.db.get_user_images(
            user_id,
            str(query.message.chat.id),
            limit=1
        )
        
        if not user_images:
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        prompt_parts = []
        if settings.get('style'):
            prompt_parts.append(f"—Å—Ç–∏–ª—å: {settings['style']}")
        if settings.get('effect'):
            prompt_parts.append(f"—ç—Ñ—Ñ–µ–∫—Ç: {settings['effect']}")
        if settings.get('preset'):
            prompt_parts.append(f"–ø—Ä–µ—Å–µ—Ç: {settings['preset']}")
            
        base_prompt = f"—Å–æ–∑–¥–∞–π –∞–Ω–∏–º–∞—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {', '.join(prompt_parts)}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {base_prompt}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏ file_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings['base_prompt'] = base_prompt
        settings['file_id'] = user_images[0]['file_id']
        self.user_settings[user_id] = settings
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {settings}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        await query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        sent_message = await query.message.reply_text(
            "üí≠ –ü—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ `/animate {base_prompt}`\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é.\n"
            f"–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/animate {base_prompt}`, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç–µ.",
            parse_mode='Markdown'
        )
        
        logger.info(f"[ConversationHandler] apply_settings –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WAITING_PROMPT –¥–ª—è user_id={user_id}")
        return WAITING_PROMPT

    async def handle_animate_button(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        try:
            parts = query.data.split('_')
            file_id_hash = parts[1]
            
            # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –ë–î –ø–æ —Ö–µ—à—É
            user_images = self.openai.db.get_user_images(
                query.from_user.id,
                str(query.message.chat.id),
                limit=5
            )
            
            file_id = None
            for img in user_images:
                if img['file_id_hash'] == file_id_hash:
                    file_id = img['file_id']
                    break
                    
            if not file_id:
                await query.message.reply_text(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ."
                )
                return
                
            await self._process_animate_command(query.message, file_id)
            
        except Exception as e:
            logging.error(f"Error in handle_animate_button: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def generate_prompt(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        effect = params.get('effect', '')
        
        prompts = {
            'zoom': '—Å–æ–∑–¥–∞–π –ø–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–µ—Ç–∞–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            'pan': '—Å–¥–µ–ª–∞–π –ø–ª–∞–≤–Ω–æ–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é',
            'rotate': '–¥–æ–±–∞–≤—å –ø–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—é',
            'morph': '—Å–æ–∑–¥–∞–π –ø–ª–∞–≤–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
            'wave': '–¥–æ–±–∞–≤—å –≤–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç, —Å–æ–∑–¥–∞—é—â–∏–π –æ—â—É—â–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è'
        }
        
        return prompts.get(effect, '–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É')

    async def handle_inline_query(self, inline_query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = inline_query.query.strip()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        results = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        effects = {
            "zoom": "–ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ",
            "pan": "–ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "rotate": "–í—Ä–∞—â–µ–Ω–∏–µ",
            "morph": "–ú–æ—Ä—Ñ–∏–Ω–≥",
            "wave": "–í–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç"
        }
        
        for effect_id, effect_name in effects.items():
            if not query or query.lower() in effect_name.lower():
                prompt = self.generate_prompt({"effect": effect_id})
                results.append(
                    InlineQueryResultArticle(
                        id=f"effect_{effect_id}",
                        title=effect_name,
                        description=f"–ü—Ä–æ–º–ø—Ç: {prompt}",
                        input_message_content=InputTextMessageContent(
                            message_text=f"/animate {prompt}"
                        )
                    )
                )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if query and len(query) >= 3:
            results.insert(0, InlineQueryResultArticle(
                id="custom",
                title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç",
                description=f"–ü—Ä–æ–º–ø—Ç: {query}",
                input_message_content=InputTextMessageContent(
                    message_text=f"/animate {query}"
                )
            ))
        
        await inline_query.answer(
            results,
            cache_time=300,
            is_personal=True
        )

    async def handle_prompt_constructor(self, function_name: str, openai, update: Update = None, **kwargs) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        try:
            user_id = update.message.from_user.id if update and update.message else None
            logger.info(f"[ConversationHandler] handle_prompt_constructor –≤—ã–∑–≤–∞–Ω: user_id={user_id}")
            logger.info("–í—ã–∑–≤–∞–Ω handle_prompt_constructor")
            if not update or not update.message:
                logger.error("update –∏–ª–∏ message –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return
                
            message = update.message
            chat_id = str(message.chat.id)
            user_id = message.from_user.id
            logger.info(f"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
            
            self.openai = openai
            self.bot = openai.bot
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            user_images = self.openai.db.get_user_images(user_id, chat_id, limit=1)
            if not user_images:
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await message.reply_text(
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏"
                )
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            settings = self.user_settings.get(user_id, {})
            logger.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {settings}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
            style_text = "üé® –°—Ç–∏–ª—å ‚úì" if settings.get('style') else "üé® –°—Ç–∏–ª—å"
            effect_text = "‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã ‚úì" if settings.get('effect') else "‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã"
            preset_text = "üé¨ –ü—Ä–µ—Å–µ—Ç—ã ‚úì" if settings.get('preset') else "üé¨ –ü—Ä–µ—Å–µ—Ç—ã"
            
            keyboard = [
                [
                    InlineKeyboardButton(style_text, callback_data="haiper_show_styles"),
                    InlineKeyboardButton(effect_text, callback_data="haiper_show_effects")
                ],
                [
                    InlineKeyboardButton(preset_text, callback_data="haiper_show_presets"),
                    InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å", callback_data="haiper_prompt_restart")
                ]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            keyboard.append([
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="haiper_close_menu")
            ])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            menu_text = "*üé¨ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏*\n\n"
            if settings:
                menu_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
                if settings.get('style'):
                    style_name = self.get_style_name(settings['style'])
                    menu_text += f"‚Ä¢ –°—Ç–∏–ª—å: {style_name}\n"
                if settings.get('effect'):
                    effect_name = self.get_effect_name(settings['effect'])
                    menu_text += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç: {effect_name}\n"
                if settings.get('preset'):
                    preset_name = self.get_preset_name(settings['preset'])
                    menu_text += f"‚Ä¢ –ü—Ä–µ—Å–µ—Ç: {preset_name}\n"
                menu_text += "\n"
            
            menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏:\n\n"
            menu_text += "üé® *–°—Ç–∏–ª—å* - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –º—É–ª—å—Ç—è—à–Ω—ã–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π\n"
            menu_text += "‚ú® *–≠—Ñ—Ñ–µ–∫—Ç—ã* - –∑—É–º, –ø–∞–Ω–æ—Ä–∞–º–∞, –≤—Ä–∞—â–µ–Ω–∏–µ\n"
            menu_text += "üé¨ *–ü—Ä–µ—Å–µ—Ç—ã* - –≥–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await message.reply_text(
                menu_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logging.error(f"Error in handle_prompt_constructor: {e}")
            if update and update.message:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    
    def get_file_id_hash(self, file_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –¥–ª—è file_id"""
        hash_object = hashlib.md5(file_id.encode())
        return hash_object.hexdigest()[:8]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞
    
    async def show_main_menu_with_selections(self, message, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        try:
            settings = self.user_settings.get(user_id, {})
            logging.info(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {settings}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            menu_text = "*üé¨ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏*\n\n"
            if settings:
                menu_text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
                if settings.get('style'):
                    style_name = self.get_style_name(settings['style'])
                    menu_text += f"‚Ä¢ –°—Ç–∏–ª—å: {style_name}\n"
                if settings.get('effect'):
                    effect_name = self.get_effect_name(settings['effect'])
                    menu_text += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç: {effect_name}\n"
                if settings.get('preset'):
                    preset_name = self.get_preset_name(settings['preset'])
                    menu_text += f"‚Ä¢ –ü—Ä–µ—Å–µ—Ç: {preset_name}\n"
                menu_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ
            style_text = "üé® –°—Ç–∏–ª—å ‚úì" if settings.get('style') else "üé® –°—Ç–∏–ª—å"
            effect_text = "‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã ‚úì" if settings.get('effect') else "‚ú® –≠—Ñ—Ñ–µ–∫—Ç—ã"
            preset_text = "üé¨ –ü—Ä–µ—Å–µ—Ç—ã ‚úì" if settings.get('preset') else "üé¨ –ü—Ä–µ—Å–µ—Ç—ã"
            
            keyboard = [
                [
                    InlineKeyboardButton(style_text, callback_data="haiper_show_styles"),
                    InlineKeyboardButton(effect_text, callback_data="haiper_show_effects")
                ],
                [
                    InlineKeyboardButton(preset_text, callback_data="haiper_show_presets"),
                    InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å", callback_data="haiper_prompt_restart")
                ]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if settings:
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="haiper_apply_settings")
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
            keyboard.append([
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="haiper_close_menu")
            ])
            
            menu_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏:\n\n"
            menu_text += "üé® *–°—Ç–∏–ª—å* - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –º—É–ª—å—Ç—è—à–Ω—ã–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π\n"
            menu_text += "‚ú® *–≠—Ñ—Ñ–µ–∫—Ç—ã* - –∑—É–º, –ø–∞–Ω–æ—Ä–∞–º–∞, –≤—Ä–∞—â–µ–Ω–∏–µ\n"
            menu_text += "üé¨ *–ü—Ä–µ—Å–µ—Ç—ã* - –≥–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            
            await message.edit_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
                raise
            else:
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ show_main_menu_with_selections: {e}")
            raise

    def get_style_name(self, style_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è"""
        styles = {
            "realistic": "üé¨ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "cartoon": "üé® –ú—É–ª—å—Ç—è—à–Ω—ã–π",
            "artistic": "üñº –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
            "cinematic": "üé• –ö–∏–Ω–æ",
            "abstract": "üåà –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π",
            "anime": "üéå –ê–Ω–∏–º–µ",
            "pixel": "üëæ –ü–∏–∫—Å–µ–ª—å–Ω—ã–π",
            "watercolor": "üé® –ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–π",
            "neon": "üí° –ù–µ–æ–Ω–æ–≤—ã–π",
            "vintage": "üì∑ –í–∏–Ω—Ç–∞–∂",
            "minimalist": "‚ö™Ô∏è –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
            "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "comic": "üí≠ –ö–æ–º–∏–∫—Å",
            "glitch": "‚ö°Ô∏è –ì–ª–∏—Ç—á",
            "surreal": "üé≠ –°—é—Ä—Ä–µ–∞–ª–∏–∑–º"
        }
        return styles.get(style_id, style_id)

    def get_effect_name(self, effect_id: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        effects = {
            "zoom": "üîç –ó—É–º",
            "pan": "‚ÜîÔ∏è –ü–∞–Ω–æ—Ä–∞–º–∞",
            "rotate": "üîÑ –ü–æ–≤–æ—Ä–æ—Ç",
            "morph": "üé≠ –ú–æ—Ä—Ñ–∏–Ω–≥",
            "wave": "üåä –í–æ–ª–Ω—ã",
            "blur": "üå´ –†–∞–∑–º—ã—Ç–∏–µ",
            "shake": "üì≥ –¢—Ä—è—Å–∫–∞",
            "glitch": "‚ö°Ô∏è –ì–ª–∏—Ç—á",
            "bounce": "üèÄ –û—Ç—Å–∫–æ–∫",
            "spiral": "üåÄ –°–ø–∏—Ä–∞–ª—å",
            "fade": "üåÖ –ó–∞—Ç—É—Ö–∞–Ω–∏–µ",
            "flash": "üí´ –í—Å–ø—ã—à–∫–∞",
            "mirror": "ü™û –ó–µ—Ä–∫–∞–ª–æ",
            "ripple": "üíß –†—è–±—å",
            "swing": "üé≠ –ö–∞—á–∞–Ω–∏–µ",
            "float": "üéà –ü–∞—Ä–µ–Ω–∏–µ",
            "pulse": "üíì –ü—É–ª—å—Å–∞—Ü–∏—è",
            "scatter": "‚ú® –†–∞—Å—Å–µ–∏–≤–∞–Ω–∏–µ",
            "stretch": "‚ÜîÔ∏è –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ",
            "fold": "üìÑ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ",
            "kaleidoscope": "üé® –ö–∞–ª–µ–π–¥–æ—Å–∫–æ–ø",
            "pixelate": "üî≤ –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è",
            "dissolve": "üí® –†–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏–µ",
            "shatter": "üíî –†–∞–∑–±–∏–≤–∞–Ω–∏–µ",
            "neon": "üí° –ù–µ–æ–Ω"
        }
        return effects.get(effect_id, effect_id)
    
    async def handle_prompt_reply(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        user_id = update.message.from_user.id
        logger.info(f"[ConversationHandler] handle_prompt_reply –≤—ã–∑–≤–∞–Ω: user_id={user_id}")
        logger.info(f"[ConversationHandler] –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        if not update.message.reply_to_message:
            logger.warning("[ConversationHandler] –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_text = update.message.reply_to_message.text
        logger.info(f"[ConversationHandler] –¢–µ–∫—Å—Ç reply_to_message: {reply_text}")
        
        if not reply_text or "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∫ –ø—Ä–æ–º–ø—Ç—É?" not in reply_text:
            logger.warning("[ConversationHandler] –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        settings = self.user_settings.get(user_id, {})

        if not settings or not settings.get('file_id'):
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /animate_prompt")
            logger.error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file_id")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if update.message.text.lower() == "–Ω–µ—Ç":
            prompt = settings.get('base_prompt', "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
        else:
            base_prompt = settings.get('base_prompt', "–æ–∂–∏–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
            prompt = f"{base_prompt}, {update.message.text}"

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if settings.get('file_id'):
            await self._process_animate_command(update.message, settings['file_id'], prompt)
            logger.info(f"–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
        else:
            logger.error("file_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")

        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if user_id in self.user_settings:
            del self.user_settings[user_id]
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")

        return ConversationHandler.END

    async def cancel_prompt(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"""
        user_id = update.message.from_user.id
        logger.info(f"[ConversationHandler] cancel_prompt –≤—ã–∑–≤–∞–Ω: user_id={user_id}")
        if user_id in self.user_settings:
            del self.user_settings[user_id]
            
        await update.message.reply_text(
            "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /animate_prompt"
        )
        return ConversationHandler.END
    