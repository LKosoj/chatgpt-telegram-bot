import asyncio
from contextlib import contextmanager
import datetime
from functools import wraps
import os
from typing import Any, Dict, Optional, List
import httpx
import numpy as np
import openai
import pandas as pd
import subprocess
import sys
import logging
import signal
import matplotlib
import matplotlib.pyplot as plt
import ast
import plotly.express as px
import json
from io import StringIO
matplotlib.use("Agg")
import uuid
import re
import importlib
import shutil
from .plugin import Plugin
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class TimeoutException(Exception):
    pass

class SecurityError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    pass

@contextmanager
def timeout(seconds: int):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"""
    def timeout_handler(signum, frame):
        raise TimeoutException(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ! –õ–∏–º–∏—Ç: {seconds} —Å–µ–∫.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    original_handler = signal.signal(signal.SIGALRM, timeout_handler)
    signal.alarm(seconds)
    
    try:
        yield
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä
        signal.alarm(0)
        signal.signal(signal.SIGALRM, original_handler)

def async_handle_exceptions(func):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)}")
            return {'error': str(e)}
    return wrapper

def handle_exceptions(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)}")
            return None
    return wrapper

class CodeInterpreterPlugin(Plugin):
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
        """
        super().__init__()
        self.api_key = os.getenv('OPENAI_API_KEY')
        http_client = httpx.AsyncClient()
        openai.api_base = 'https://api.vsegpt.ru/v1'
        self.client = openai.AsyncOpenAI(api_key=self.api_key, http_client=http_client, timeout=300.0, max_retries=3)

        self.data: Optional[pd.DataFrame] = None
        self.timeout_seconds = 120
        self.supported_formats = {
            '.csv': pd.read_csv,
            '.xlsx': pd.read_excel,
            '.json': pd.read_json,
            '.parquet': pd.read_parquet,
            '.pkl': pd.read_pickle
        }

    def get_source_name(self) -> str:
        return "Code Interpreter"

    def get_spec(self) -> List[Dict]:
        return [{
            "name": "deep_analysis",
            "description": "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
            "parameters": {
                "type": "object",
                "properties": {
                    "code_prompt": {
                        "type": "string",
                        "description": "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ Python –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                    },
                    "data_path": {
                        "type": "string",
                        "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                    }
                },
                "required": ["code_prompt"]
            }
        }]

    #def get_commands(self) -> List[Dict]:
    #    return [{
    #        "command": "code",
    #        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"
    #    }]

    async def execute(self, function_name: str, helper, **kwargs) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞
        
        Args:
            function_name (str): –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            helper: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤
        """
        if function_name == "deep_analysis":
            session_id = str(uuid.uuid4())[:8]
            code_prompt = kwargs.get('code_prompt')
            data_path = kwargs.get('data_path', None)
            user_id = kwargs.get('user_id', None)

            if not code_prompt:
                return {
                    "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                }

            result = await self.run_code(data_path, code_prompt, session_id)
            #logging.info(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {result}")
            
            if isinstance(result, str):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
                html_file = f"interactive_plots_{session_id}.html"
                
                if os.path.exists(html_file):
                    return {
                        "direct_result": {
                            "kind": "file",
                            "format": "path",
                            "value": html_file,
                        }
                    }
                else:
                    self.advanced_visualization(result, session_id)
                    return {
                        "direct_result": {
                            "kind": "file",
                            "format": "path",
                            "value": html_file,
                            "add_value": "üîÑ –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
                        }
                    }
            elif isinstance(result, dict):
                if 'error' in result:
                    return {
                        "error": result['error']
                    }
                else:
                    return result
            else:
                return {
                    "error": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                }
        else:
            return {
                "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}"
            }

    async def execute_code_task(self, data_path, code_prompt):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ execute –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏"""
        return await self.run_code(data_path, code_prompt)

    @async_handle_exceptions
    async def generate_code(self, prompt: str, session_id: str = None) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python-–∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            prompt (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
            session_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        enhanced_prompt = f"""
        –°–æ–∑–¥–∞–π Python-–∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º
        - –•–æ—Ä–æ—à–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        - –° –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        - –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å if __name__ == "__main__": –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        - –í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–¥ –Ω–∞ python, –¥–∞–∂–µ –±–µ–∑ ``` –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ! –≠—Ç–æ –≤–∞–∂–Ω–æ!
        - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞ –≤—Ö–æ–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ case sensitive.
        - –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ - —Å–¥–µ–ª–∞–π –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ 'plots'.
        - –í–æ –≤—Å–µ—Ö –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π —Å—É—Ñ—Ñ–∏–∫—Å _{session_id}

        –ó–∞–¥–∞—á–∞:
        {prompt}
        """
        #print(f"enhanced_prompt: {enhanced_prompt}")
        try:
            response = await self.client.chat.completions.create(
                model="openai/o3-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã - —Å–∞–º—ã–π –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á. –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á. –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —ç—Ç–æ –≤–∞–∂–Ω–æ! –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ png. –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —ç—Ç–æ –≤–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–π traceback –≤ –∫–æ–¥, —ç—Ç–æ –≤–∞–∂–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π logging.error(f'Error message: {str(e)}', exc_info=True) –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥, —ç—Ç–æ –≤–∞–∂–Ω–æ!"},
                    {"role": "user", "content": enhanced_prompt}
                ],
                temperature=0.1,
                max_tokens=70000,
                extra_headers={ "X-Title": "tgBot" },
            )
            return response.choices[0].message.content
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            return None

    @async_handle_exceptions
    async def install_package(self, package_name: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.
        
        Args:
            package_name (str): –ò–º—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            __import__(package_name)
            return True
        except ImportError:
            logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç: {package_name}")
            proc = await asyncio.create_subprocess_exec(
                sys.executable, "-m", "pip", "install", package_name,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            await proc.wait()
            return proc.returncode == 0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞–∫–µ—Ç–∞ {package_name}: {e}")

    @handle_exceptions
    def analyze_code_syntax(self, code):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞.
        
        Args:
            code: –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–µ—Ä–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            # Ensure code is a string
            if not isinstance(code, str):
                if code is None:
                    logging.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ (None)")
                    return {"error": "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ (None)"}
                code = str(code)
            
            # Remove any leading/trailing whitespace
            code = code.strip()
            
            if not code:
                logging.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥")
                return {"error": "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥"}
                
            ast.parse(code)
            return {"status": True}
            
        except SyntaxError as e:
            logging.error(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"error": f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"}
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}"}
        except TypeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}"}
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}")
            return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: {e}"}

    @async_handle_exceptions
    async def debug_code(self, code, error_message, add_prompt, session_id):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫."""
        try:
            fixed_code = await self.generate_code(f"–ò—Å–ø—Ä–∞–≤—å –≤ –∫–æ–¥–µ –æ—à–∏–±–∫–∏, –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–¥ –Ω–∞ python, –¥–∞–∂–µ –±–µ–∑ ``` –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ! –≠—Ç–æ –≤–∞–∂–Ω–æ!:\n–û—à–∏–±–∫–∞: {error_message}\n–ö–æ–¥: {code}\n", session_id)
            return fixed_code
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")
            return None

    @async_handle_exceptions
    async def _execute_code(self, code: str) -> Optional[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∞–π–º-–∞—É—Ç–æ–º.
        
        Args:
            code (str): –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Optional[Dict[str, Any]]: –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not code:
            logging.error("–ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥")
            return None

        output_buffer = StringIO()
        original_stdout = sys.stdout
        sys.stdout = output_buffer
        try:
            with timeout(self.timeout_seconds):
                
                exec_globals = {
                    "__name__": "__main__",
                    "plt": plt,
                    "np": np, 
                    "pd": pd,
                    "px": px,
                    "matplotlib": matplotlib,
                    "logging": logging,
                    "os": os,
                    "__captured_values__": {}
                }
                exec_locals = {}
                                
                if "rm -r" in code or "os.system" in code:
                    raise SecurityError("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥")
                    
                #logging.info(f"{code}")
                exec(code, exec_globals, exec_globals)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                sys.stdout = original_stdout
                captured_output = output_buffer.getvalue().strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                exec_globals['__captured_print__'] = captured_output
                return exec_globals
        except TimeoutException as e:
            logging.error(str(e))
            return {'error': str(e), 'output': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}
        except ModuleNotFoundError as e:
            missing_package = str(e).split("'")[1]
            logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {missing_package}")
            if await self.install_package(missing_package):
                return await self._execute_code(code)
        except Exception as e:
            logging.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
            return {'error': str(e), 'output': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout –∏ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            sys.stdout = original_stdout
            captured_output = output_buffer.getvalue().strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            exec_locals['__captured_print__'] = captured_output

        return exec_locals

    async def preinstall_required_packages(self, code: str):
        required = re.findall(r'^\s*import (\w+)|^\s*from (\w+)', code, re.M)
        packages = {pkg for pair in required for pkg in pair if pkg}
        
        for pkg in packages:
            if not self.package_installed(pkg):
                await self.install_package(pkg)

    def package_installed(self, name: str):
        return importlib.util.find_spec(name) is not None
        
    @async_handle_exceptions
    async def execute_code(self, code):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö."""
        
        code = self.extract_code_from_response(code)
        await self.preinstall_required_packages(code)
        analyze_result = self.analyze_code_syntax(code)
        if analyze_result is not None and analyze_result['status']:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
            plt.close("all")
            
            result = await self._execute_code(code)
            if result is not None:
                return result
            else:
                return {'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
        else:
            return analyze_result
    
    @handle_exceptions
    def load_data(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ CSV, Excel –∏ JSON)."""
        try:
            if file_path.endswith(".csv"):
                self.data = pd.read_csv(file_path)
            elif file_path.endswith(".xlsx"):
                self.data = pd.read_excel(file_path)
            elif file_path.endswith(".json"):
                self.data = pd.read_json(file_path)
            else:
                logging.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
                return None
            logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return self.data
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    @handle_exceptions
    def validate_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        if self.data is None:
            logging.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return False
        if self.data.isnull().sum().sum() > 0:
            logging.warning("–í –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        logging.info("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
        return True

    @handle_exceptions
    def advanced_visualization(self, result, session_id):
        """
        –°–æ–∑–¥–∞—ë—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.
        
        Args:
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        """
        output_path=f"interactive_plots_{session_id}.html"
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            plots_dir = 'plots'
            os.makedirs(plots_dir, exist_ok=True)

            plot_files = []
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
            if not os.path.exists(plots_dir):
                logging.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                plot_files = [f for f in os.listdir(plots_dir) if f'_{session_id}' in f]
            
            if not plot_files:
                logging.error("–ì—Ä–∞—Ñ–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
            html_content = [
                '<!DOCTYPE html>',
                '<html>',
                '<head>',
                '    <meta charset="utf-8">',
                '    <title>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</title>',
                '    <style>',
                '        .plot-container {',
                '            max-width: 800px;',
                '            margin: 20px auto;',
                '            padding: 20px;',
                '            border: 1px solid #ddd;',
                '            border-radius: 5px;',
                '        }',
                '        img {',
                '            max-width: 100%;',
                '            height: auto;',
                '            display: block;',
                '            margin: 0 auto;',
                '        }',
                '        h2 {',
                '            text-align: center;',
                '            color: #333;',
                '        }',
                '    </style>',
                '</head>',
                '<body>'
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ HTML
            for i, plot_file in enumerate(sorted(plot_files), 1):
                plot_path = os.path.join(plots_dir, plot_file)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
                with open(plot_path, 'rb') as img_file:
                    import base64
                    img_data = base64.b64encode(img_file.read()).decode('utf-8')
                
                html_content.extend([
                    '    <div class="plot-container">',
                    f'        <h2>–ì—Ä–∞—Ñ–∏–∫ {i}</h2>',
                    f'        <img src="data:image/png;base64,{img_data}" alt="–ì—Ä–∞—Ñ–∏–∫ {i}">',
                    '    </div>'
                ])

            result_str = result
            #print(f"result_str: {result_str}")
            html_content.extend([
                '    <div class="result-container">',
                '        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞</h2>',
                f'        <pre>{result_str}</pre>',
                '    </div>'
            ])

            html_content.append('</body></html>')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(html_content))

            logging.info(f"HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_path}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

    def generate_report(self, code, explanation, results, output_path="report.txt"):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –∫–æ–¥–æ–º, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        try:
            result_str = "=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ ===\n" + code + "\n\n" + "=== –û–±—ä—è—Å–Ω–µ–Ω–∏–µ ===\n" + str(explanation) + "\n\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ print
            if '__captured_print__' in results:
                result_str += "\n=== –í—ã–≤–æ–¥ print ===\n" + results['__captured_print__']

            #with open(output_path, "w", encoding='utf-8') as f:
            #    f.write(result_str)
            #logging.info(f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")
            return result_str
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return None

    async def explain_code(self, code):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": f"–û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:\n{code}"}],
                max_tokens=55000,
                extra_headers={ "X-Title": "tgBot" },
            )
            explanation_text = response.choices[0].message.content
            logging.info("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            return explanation_text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
            return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–º —Å –æ—à–∏–±–∫–æ–π
    def is_error_result(self, result):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–º
        if not isinstance(result, dict):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –æ—à–∏–±–∫—É
        error_indicators = [
            'error' in result,
            'output' in result and 'error' in str(result['output']).lower(),
            '__captured_print__' in result and 'error' in str(result['__captured_print__']).lower(),
            '__captured_print__' in result and '–æ—à–∏–±–∫–∞' in str(result['__captured_print__']).lower(),
            '__captured_print__' in result and 'name is not defined' in str(result['__captured_print__']).lower(),
        ]
        
        return any(error_indicators)

    def extract_code_from_response(self, text: str):
        pattern = r"```(?:python)?(.*?)```"
        matches = re.findall(pattern, text, re.DOTALL)
        return matches[0].strip() if matches else text
    
    def clean_data(self, session_id):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _{session_id} –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö data –∏ plots."""
        for file in os.listdir('data'):
            if f'_{session_id}' in file:
                os.remove(os.path.join('data', file))
        for file in os.listdir('plots'):
            if f'_{session_id}' in file:
                os.remove(os.path.join('plots', file))

    async def run_code(self, data_path, code_prompt, session_id, attempts=3):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞."""
        add_prompt = ""
        if data_path:
            # –ï—Å–ª–∏ —ç—Ç–æ url, —Ç–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            if data_path.startswith('http'):
                data_path = await self.download_file(data_path)
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_name, file_ext = os.path.splitext(data_path)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å session_id
            new_data_path = f"{file_name}_{session_id}{file_ext}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            os.makedirs('data', exist_ok=True)
            new_data_path = os.path.join('data', os.path.basename(new_data_path))
            shutil.copy2(data_path, new_data_path)
            data_path = new_data_path
            
            self.load_data(data_path)
            if not self.validate_data():
                return None
            add_prompt = f"\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ {data_path}"

        if not code_prompt:
            logging.error("–ù–µ –∑–∞–¥–∞–Ω –∫–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return None

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            generated_code = await self.generate_code(code_prompt + add_prompt, session_id)
            if not generated_code:
                logging.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
                return None
        
            for attempt in range(attempts):

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
                result = await self.execute_code(generated_code)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–º —Å –æ—à–∏–±–∫–æ–π
                if result is not None and not self.is_error_result(result):
                    # –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
                    logging.info("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                    
                    explanation = await self.explain_code(generated_code)
                    
                    report = self.generate_report(generated_code, explanation, result)
                    self.advanced_visualization(report, session_id)
                    self.clean_data(session_id)
                    return report

                # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞
                if self.is_error_result(result):
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if '__captured_print__' in result:
                        error_message = result['__captured_print__']
                    elif 'error' in result:
                        error_message = result['error']
                    else:
                        error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

                    if attempt == attempts - 1:
                        #logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ {error_message}. –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–¥:\n {generated_code}")
                        logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π.")
                        self.clean_data(session_id)
                        return f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ {error_message}. –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–¥:\n {generated_code}"

                    logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ {error_message}. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ª–∞–¥–∏—Ç—å.")
                    generated_code = await self.debug_code(generated_code, error_message, add_prompt, session_id)
                    
                    if not generated_code:
                        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ª–∞–¥–∏—Ç—å –∫–æ–¥.")
                        return None
                else:
                    logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {result}")
                    return None
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
            return None
        finally:
            self.clean_data(session_id)

    async def download_file(self, url: str) -> Optional[str]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ.
        
        Args:
            url (str): URL —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('data', exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            parsed_url = urlparse(url)
            filename = os.path.basename(parsed_url.path)
            
            if not filename:
                # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
                extension = '.tmp'
                if '.' in url:
                    extension = '.' + url.split('.')[-1]
                filename = f"downloaded_{str(uuid.uuid4())[:8]}{extension}"
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            save_path = os.path.join('data', filename)
            
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with httpx.AsyncClient() as client:
                response = await client.get(url)
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(save_path, 'wb') as f:
                    f.write(response.content)
                
                logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
                return save_path
                
        except httpx.HTTPError as e:
            logging.error(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
