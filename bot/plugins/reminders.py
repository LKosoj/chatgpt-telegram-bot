import logging
from typing import Dict, Any
from .plugin import Plugin
from datetime import datetime
import json
import os

class RemindersPlugin(Plugin):
    """
    –ü–ª–∞–≥–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    """
    def __init__(self):
        self.reminders = {}
        self.reminders_file = os.path.join(os.path.dirname(__file__), "reminders.json")
        self.load_reminders()

    def get_source_name(self) -> str:
        return "Reminders"

    def get_spec(self) -> [Dict]:
        return [{
            "name": "set_reminder",
            "description": f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å—á–µ—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M")}',
            "parameters": {
                "type": "object",
                "properties": {
                    "time": {
                        "type": "string",
                        "description": "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM"
                    },
                    "message": {
                        "type": "string",
                        "description": "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                    },
                    "current_time": {
                        "type": "string",
                        "description": f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {datetime.now().strftime("%Y-%m-%d %H:%M")}'
                    },
                    "integration": {
                        "type": "string", 
                        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (telegram)",
                        "enum": ["telegram",]
                    }
                },
                "required": ["time", "message", "integration","current_time"]
            }
        },
        {
            "name": "list_reminders",
            "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            "parameters": {
                "type": "object",
                "properties": {}
            }
        },
        {
            "name": "delete_reminder", 
            "description": "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID",
            "parameters": {
                "type": "object",
                "properties": {
                    "reminder_id": {
                        "type": "string",
                        "description": "ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                    }
                },
                "required": ["reminder_id"]
            }
        }]

    def load_reminders(self):
        """Load reminders from storage"""
        try:
            if os.path.exists(self.reminders_file):  # Fixed: using reminders_file instead of storage_path
                with open(self.reminders_file, 'r') as f:  # Fixed: using reminders_file
                    self.reminders = json.load(f) 
                    if not isinstance(self.reminders, dict):  # Ensure it's a dictionary
                        self.reminders = {}
        except Exception as e:
            logging.error(f"Error loading reminders: {e}")
            self.reminders = {}  # Initialize as empty dict, not list

    def save_reminders(self):
        """Save reminders to storage"""
        try:
            with open(self.reminders_file, 'w') as f:  # Fixed: using reminders_file
                json.dump(self.reminders, f)
        except Exception as e:
            logging.error(f"Error saving reminders: {e}")
                        
    async def check_reminders(self, helper):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        current_time = datetime.now()

        for user_id, user_reminders in list(self.reminders.items()):
            for reminder_id, reminder in list(user_reminders.items()):
                # Convert reminder time from ISO format string to datetime
                reminder_time = datetime.fromisoformat(reminder['time'])
                
                # Check if reminder time is in the past
                if current_time >= reminder_time:
                    await self.send_reminder(reminder, helper)
                    del self.reminders[user_id][reminder_id]
                    
                    # Remove user dict if no reminders left
                    if not self.reminders[user_id]:
                        del self.reminders[user_id]
        
        # Save changes if any reminders were processed
        self.save_reminders()

    async def send_reminder(self, reminder: Dict, helper) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        """
        if reminder["integration"] == "telegram":
            await helper.send_message(
                chat_id=reminder["user_id"],
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{reminder['message']}",
                reply_to_message_id=reminder.get("reply_to_message_id")
            )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (email, slack)

    async def execute(self, function_name: str, helper, **kwargs) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–≥–∏–Ω–∞
        """
        if function_name == "set_reminder":
            user_id = str(helper.user_id)
            reminder_id = f'{datetime.now().strftime("%Y%m%d%H%M%S")}_{user_id}'
            # Convert datetime to ISO format string
            reminder_time = datetime.strptime(kwargs["time"], "%Y-%m-%d %H:%M")
            
            reminder = {
                "id": reminder_id,
                "user_id": user_id,
                "time": reminder_time.isoformat(),
                "message": kwargs["message"],
                "integration": kwargs["integration"],
                "reply_to_message_id": helper.message_id
            }

            if user_id not in self.reminders:
                self.reminders[user_id] = {}
            self.reminders[user_id][reminder_id] = reminder
            self.save_reminders()
            
            return {
                "success": True,
                "message": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {kwargs['time']}"
            }

        elif function_name == "list_reminders":
            user_id = str(helper.user_id)
            user_reminders = self.reminders.get(user_id, {})
            
            if not user_reminders:
                return {"message": "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"}
            
            reminders_list = []
            for r_id, r in user_reminders.items():
                reminders_list.append(f"ID: {r_id}\n–í—Ä–µ–º—è: {r['time']}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {r['message']}")
            
            return {
                "message": "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n" + "\n\n".join(reminders_list)
            }

        elif function_name == "delete_reminder":
            user_id = str(helper.user_id)
            reminder_id = kwargs["reminder_id"]
            
            if user_id in self.reminders and reminder_id in self.reminders[user_id]:
                del self.reminders[user_id][reminder_id]
                if not self.reminders[user_id]:
                    del self.reminders[user_id]
                self.save_reminders()
                return {"message": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ"}
            
            return {"message": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        return {"error": "Unknown function"}