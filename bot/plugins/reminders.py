import logging
from typing import Dict, Any, List
from plugins.plugin import Plugin
from datetime import datetime
import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

class RemindersPlugin(Plugin):
    """
    –ü–ª–∞–≥–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    """
    def __init__(self):
        self.reminders = {}
        self.reminders_file = os.path.join(os.path.dirname(__file__), "reminders.json")
        self.load_reminders()

    def get_source_name(self) -> str:
        return "Reminders"

    def get_spec(self) -> List[Dict]:
        return [{
            "name": "set_reminder",
            "description": f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —Å–µ–π—á–∞—Å {datetime.now().strftime("%Y%m%d%H%M%S")}',
            "parameters": {
                "type": "object",
                "properties": {
                    "time": {
                        "type": "string",
                        "description": "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM"
                    },
                    "message": {
                        "type": "string",
                        "description": "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                    },
                    "current_time": {
                        "type": "string",
                        "description": f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {datetime.now().strftime("%Y-%m-%d %H:%M")}'
                    },
                    "integration": {
                        "type": "string", 
                        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (telegram)",
                        "enum": ["telegram",]
                    }
                },
                "required": ["time", "message", "integration","current_time"]
            }
        },
        {
            "name": "list_reminders",
            "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            "parameters": {
                "type": "object",
                "properties": {
                    "current_time": {
                        "type": "string",
                        "description": f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {datetime.now().strftime("%Y-%m-%d %H:%M")}'
                    }
                },
            }
        },
        {
            "name": "delete_reminder", 
            "description": "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID",
            "parameters": {
                "type": "object",
                "properties": {
                    "reminder_id": {
                        "type": "string",
                        "description": "ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                    }
                },
                "required": ["reminder_id"]
            }
        }]

    def get_commands(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω"""
        return [
            {
                "command": "set_reminder",
                "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
                "handler": self.execute,
                "handler_kwargs": {"function_name": "set_reminder"},
                "args": "<time> <message>",
                "plugin_name": "reminders",
            },
            {
                "command": "list_reminders",
                "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "handler": self.handle_prompt_constructor,
                "handler_kwargs": {},
                "plugin_name": "reminders",
                "add_to_menu": True,
            },
            {
                "command": "delete_reminder",
                "description": "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "args": "<reminder_id>",
                "handler": self.execute,
                "handler_kwargs": {"function_name": "delete_reminder"},
                "plugin_name": "reminders"
            },
            {
                # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query –ø–ª–∞–≥–∏–Ω–∞
                "callback_query_handler": self.handle_reminder_callback,
                "callback_pattern": "^reminder:",
                "plugin_name": "reminders",
                "handler_kwargs": {}
            }
        ]

    async def handle_prompt_constructor(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        self.load_reminders()
        message = update.message
        user_id = str(message.from_user.id) if message else None
        user_reminders = self.reminders.get(user_id, {})

        if not user_reminders:
            await message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                parse_mode='Markdown'
            )
            return               
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        keyboard = []
        
        for r_id, r in user_reminders.items():            
            reminder_time = datetime.fromisoformat(r['time'])
            formatted_time = reminder_time.strftime('%d.%m.%Y %H:%M')
            
            # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìÖ {formatted_time} üìù {r['message']}",
                    callback_data=f"reminder:view:{r_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"reminder:delete:{r_id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        keyboard.append([
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder:close_menu:")
        ])

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    def load_reminders(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            if os.path.exists(self.reminders_file):
                with open(self.reminders_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, dict):
                        self.reminders = data
                    else:
                        self.reminders = {}
            else:
                self.reminders = {}
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            self.reminders = {}

    def save_reminders(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        try:
            with open(self.reminders_file, 'w', encoding='utf-8') as f:
                json.dump(self.reminders, f, ensure_ascii=False)
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def check_reminders(self, helper: Any) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        current_time = datetime.now()
        processed_reminders = False

        self.load_reminders()

        for user_id, user_reminders in list(self.reminders.items()):
            for reminder_id, reminder in list(user_reminders.items()):
                # Convert reminder time from ISO format string to datetime
                reminder_time = datetime.fromisoformat(reminder['time'])
                
                # Check if reminder time is in the past
                if current_time >= reminder_time:
                    await self.send_reminder(reminder, helper)
                    del self.reminders[user_id][reminder_id]
                    
                    # Remove user dict if no reminders left
                    if not self.reminders[user_id]:
                        del self.reminders[user_id]
        
                    # Save changes if any reminders were processed
                    processed_reminders = True

        if processed_reminders:
            self.save_reminders()

    async def send_reminder(self, reminder: Dict, helper) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        """
        if reminder["integration"] == "telegram":
            await helper.send_message(
                chat_id=reminder["user_id"],
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{reminder['message']}",
                reply_to_message_id=reminder.get("reply_to_message_id")
            )
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (email, slack)

    async def execute(self, function_name: str, helper, **kwargs) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞–≥–∏–Ω–∞
        """
        user_id = str(kwargs.get('chat_id'))
        self.load_reminders()
        if function_name == "set_reminder":
            self.load_reminders()
            reminder_id = f'{datetime.now().strftime("%Y%m%d%H%M%S")}_{user_id}'
            # Convert datetime to ISO format string
            reminder_time = datetime.strptime(kwargs["time"], "%Y-%m-%d %H:%M")
            
            reminder = {
                "id": reminder_id,
                "user_id": user_id,
                "time": reminder_time.isoformat(),
                "message": kwargs["message"],
                "integration": kwargs["integration"],
                "reply_to_message_id": helper.message_id
            }

            if user_id not in self.reminders:
                self.reminders[user_id] = {}
            self.reminders[user_id][reminder_id] = reminder
            self.save_reminders()
            
            return {
                "direct_result": {
                    "kind": "text",
                    "format": "markdown",
                    "value": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {kwargs['time']}"
                }
            }

        elif function_name == "delete_reminder":
            self.load_reminders()
            reminder_id = kwargs.get("reminder_id") or kwargs.get("query")
            logging.info(f"–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.reminders}")
            logging.info(f"kwargs: {kwargs}")
            logging.info(f"reminder_id: {reminder_id}")

            if user_id in self.reminders and reminder_id in self.reminders[user_id]:
                del self.reminders[user_id][reminder_id]
                if not self.reminders[user_id]:
                    del self.reminders[user_id]
                self.save_reminders()
                return {
                    "direct_result": {
                        "kind": "text",
                        "format": "markdown",
                        "value": f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ"
                    }
                }                
            
            return {
                "direct_result": {
                    "kind": "text",
                    "format": "markdown",
                    "value": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                }
            }                

        return {"error": "Unknown function"}

    async def handle_reminder_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        query = update.callback_query

        try:
            action, command, reminder_id = query.data.split(":")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
            if action == "reminder" and command == "close_menu":
                await query.answer("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
                await query.message.delete()
                return

            if action == "reminder" and command == "view":
                user_id = str(query.from_user.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if user_id in self.reminders and reminder_id in self.reminders[user_id]:
                    reminder = self.reminders[user_id][reminder_id]
                    reminder_time = datetime.fromisoformat(reminder['time'])
                    formatted_time = reminder_time.strftime('%d.%m.%Y %H:%M')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
                    await query.answer(
                        text=f"üìÖ {formatted_time}\nüìù {reminder['message']}",
                        show_alert=True,
                        cache_time=0
                    )
                    return
                else:
                    await query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                    return

            if action == "reminder" and command == "delete":
                user_id = str(query.from_user.id)
                await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if user_id in self.reminders and reminder_id in self.reminders[user_id]:
                    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    del self.reminders[user_id][reminder_id]
                    if not self.reminders[user_id]:
                        del self.reminders[user_id]
                    self.save_reminders()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                    if user_id in self.reminders:
                        keyboard = []
                        
                        for r_id, r in self.reminders[user_id].items():      
                            reminder_time = datetime.fromisoformat(r['time'])
                            formatted_time = reminder_time.strftime('%d.%m.%Y %H:%M')
                            
                            # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            keyboard.append([
                                InlineKeyboardButton(
                                    text=f"üìÖ {formatted_time} üìù {r['message']}",
                                    callback_data=f"reminder:view:{r_id}"
                                ),
                                InlineKeyboardButton(
                                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                                    callback_data=f"reminder:delete:{r_id}"
                                ),
                            ])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                        keyboard.append([
                            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="reminder:close_menu:")
                        ])
                        await query.edit_message_text(
                            text="–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                            reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None,
                            parse_mode='markdown'
                        )
                    else:
                        await query.edit_message_text(
                            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                            parse_mode='markdown'
                        )
                    
                    return
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text(
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}",
                parse_mode='markdown'
            )