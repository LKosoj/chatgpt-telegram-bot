from smolagents import CodeAgent, DuckDuckGoSearchTool, LiteLLMModel, tool, OpenAIServerModel
from typing import Dict, Any, List, Optional
import os
import asyncio
import re
import matplotlib
import json
matplotlib.use("Agg")
import matplotlib.pyplot as plt
import networkx as nx
from agent_factory import AgentFactory, model_lite, model_hard, model_search

class DynamicAgentSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.factory = AgentFactory()
        self.task_queue = asyncio.Queue()
        self.agent_pool = {}
        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.shared_results = {}
    
    def get_agent_dependencies(self, agent_type: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        return self.factory.AGENT_PROFILES[agent_type].get('dependencies', [])
    
    def get_available_agents(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        
        Returns:
            Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≥–µ–Ω—Ç–µ:
                - description (str): –û–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                - dependencies (List[str]): –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
                - capabilities (List[str]): –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
                - tools (List[str]): –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                - api_integrations (List[str]): –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
        """
        agents_info = {}
        diagram_result = None
        for agent_type, profile in self.factory.AGENT_PROFILES.items():
            agents_info[agent_type] = {
                'description': profile.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                'dependencies': profile.get('dependencies', []),
                'capabilities': profile.get('capabilities', []),
                'tools': profile.get('tools', []),
                'api_integrations': profile.get('api_integrations', [])
            }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –∞–≥–µ–Ω—Ç–æ–≤
        try:
            diagram_agent = self.factory.create_agent('diagram_creator')
            diagram_description = """
            –°–æ–∑–¥–∞–π –¥–∏–∞–≥—Ä–∞–º–º—É —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
            """
            for agent_type, info in agents_info.items():
                diagram_description += f"\n\n–ê–≥–µ–Ω—Ç: {agent_type}"
                diagram_description += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}"
                if info['dependencies']:
                    diagram_description += f"\n–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(info['dependencies'])}"
                if info['capabilities']:
                    diagram_description += f"\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(info['capabilities'])}"
            
            diagram_result = diagram_agent.run(diagram_description)
            if isinstance(diagram_result, str):
                print("\nüé® –î–∏–∞–≥—Ä–∞–º–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∞–≥–µ–Ω—Ç–æ–≤: {str(e)}")
        
        return agents_info, diagram_result
    
    async def analyze_task(self, task: str) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            analysis_prompt = f"""
            –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. 
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã, –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
            {', '.join(f"{k} ({v['description']}) - {', '.join(v['dependencies'])}" for k, v in self.factory.AGENT_PROFILES.items())}
            
            –ó–∞–¥–∞—á–∞: {task}
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.
            –í—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
            """
            
            model = model_lite
            messages = [
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫. –í—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."},
                {"role": "user", "content": analysis_prompt}
            ]
            response = model(messages)
            
            if not response.content.strip():
                raise ValueError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                
            agent_types = [a.strip().strip("'\"") for a in response.content.split(',')]
            invalid_types = [t for t in agent_types if t not in self.factory.AGENT_PROFILES]
            if invalid_types:
                raise ValueError(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤: {invalid_types}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            all_required_agents = set(agent_types)
            for agent_type in agent_types:
                dependencies = self.get_agent_dependencies(agent_type)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                all_required_agents.update(dependencies)
            
            return list(all_required_agents)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏: {str(e)}")
            return ['researcher']

    def can_start_agent(self, agent_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        dependencies = self.get_agent_dependencies(agent_type)
        if not dependencies:
            return True
        
        for dependency in dependencies:
            if dependency not in self.shared_results or not self.shared_results[dependency]:
                return False
        return True

    async def assign_task(self, agent: CodeAgent, task: str):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º agent_id –∏ —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
            agent_id = getattr(agent, 'agent_id', 'unknown')
            agent_type = agent_id.split('-')[0]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            context = ""
            dependencies = self.get_agent_dependencies(agent_type)
            if dependencies:
                context = "\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤:\n"
                for dep in dependencies:
                    if dep in self.shared_results and self.shared_results[dep]:
                        context += f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç {dep}:\n{self.shared_results[dep]}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–¥–∞—á–µ
            task_with_context = f"{task}\n{context}" if context else task
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, agent.run, task_with_context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.shared_results[agent_type] = result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞
            for info in self.agent_pool.values():
                if info['agent'] == agent:
                    info['results'].append(result)
                    info['status'] = 'idle'
                    break
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ {agent_id}: {str(e)}"
            print(error_msg)
            for info in self.agent_pool.values():
                if info['agent'] == agent:
                    info['status'] = 'idle'
                    info['results'].append(f"[–û–®–ò–ë–ö–ê] {error_msg}")
                    break

    async def coordinate(self, initial_task: str):
        """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            required_agents = await self.analyze_task(initial_task)
            print(f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–≥–µ–Ω—Ç—ã: {required_agents}")
            if not required_agents:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø–æ–¥–∑–∞–¥–∞—á
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–¥–∞—á—É –∫ –ø–æ–¥–∑–∞–¥–∞—á–∞–º
            for agent_type in required_agents:
                agent = self.factory.create_agent(agent_type)
                agent_id = getattr(agent, 'agent_id', f"{agent_type}-unknown")
                if agent_id not in self.agent_pool:
                    self.agent_pool[agent_id] = {
                        'agent': agent,
                        'status': 'idle',
                        'results': [],
                        'subtask': f"{initial_task}\n\n–í–∞—à–∞ —Ä–æ–ª—å - {self.factory.AGENT_PROFILES[agent_type]['description']}"
                    }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            while True:
                tasks = []
                all_completed = True
                
                for agent_id, info in self.agent_pool.items():
                    agent_type = agent_id.split('-')[0]
                    
                    if info['status'] == 'idle' and not info['results']:
                        all_completed = False
                        if self.can_start_agent(agent_type):
                            info['status'] = 'busy'
                            task = asyncio.create_task(
                                self.assign_task(info['agent'], info['subtask'])
                            )
                            tasks.append(task)
                
                if tasks:
                    await asyncio.gather(*tasks)
                elif all_completed:
                    break
                else:
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    await asyncio.sleep(0.1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = []
            report.append("=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===\n")
            report.append("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            report.append(f"- –ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞: {initial_task}")
            report.append(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(self.agent_pool)}")
            report.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            for agent_id, info in self.agent_pool.items():
                if info['results']:
                    report.append(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–∞ {agent_id}:")
                    for idx, result in enumerate(info['results'], 1):
                        report.append(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç #{idx}:")
                        try:
                            parsed_result = json.loads(result)
                            for key, value in parsed_result.items():
                                report.append(f"    {key}: {value}")
                        except:
                            report.append(f"    {result}")
                    report.append("")
            
            return "\n".join(report)
                    
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {str(e)}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"

def show_available_agents(system: DynamicAgentSystem):
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
    print("=" * 50)
    agents, diagram = system.get_available_agents()
    for agent_type, info in agents.items():
        print(f"\nü§ñ {agent_type}:")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        if info['dependencies']:
            print(f"   üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(info['dependencies'])}")
        if info['capabilities']:
            print(f"   üí™ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(info['capabilities'])}")
    print("=" * 50 + "\n")
    print(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –∞–≥–µ–Ω—Ç–æ–≤:\n{diagram}")
    print("=" * 50 + "\n")
            

def analyze_ai_trends(system: DynamicAgentSystem):
    complex_task = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥:
    1. –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö
    2. –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≥–æ–¥–∞–º–∏
    3. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    5. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    return complex_task

def analyze_real_estate_trends(system: DynamicAgentSystem):
    complex_task = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω –Ω–∞ –∂–∏–ª—å–µ –≤ –ú–æ—Å–∫–≤–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç.
    –°—Ä–∞–≤–Ω–∏—Ç—å —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
    –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤.
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    return complex_task

def analyze_data_trends(system: DynamicAgentSystem):
    complex_task = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    """
    return complex_task

def analyze_crypto_trends(system: DynamicAgentSystem):
    complex_task = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–¥–æ–≤.
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    """
    return complex_task

def analyze_crypto_system(system: DynamicAgentSystem):
    complex_task = """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    return complex_task

def create_mind_map(system: DynamicAgentSystem):
    complex_task = """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è mind map –ø–æ —Ç–µ–º–µ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ê–≥–µ–Ω—Ç–æ–≤".
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.
    –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """ 
    return complex_task 

async def main():
    system = DynamicAgentSystem()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    #show_available_agents(system)
    #return

    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!!!
    complex_task = analyze_ai_trends(system)
    #complex_task = analyze_real_estate_trends(system)
    #complex_task = analyze_data_trends(system)
    #complex_task = analyze_crypto_trends(system)
    #complex_task = analyze_crypto_system(system)
    #complex_task = create_mind_map(system)
    

    content = await system.coordinate(complex_task)
    
    print("\n" + "=" * 50)
    print(content)
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(main())